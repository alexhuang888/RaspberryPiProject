// Generated by gencpp from file wheels/cmd_set_car_two_wheels_direction_speedRequest.msg
// DO NOT EDIT!


#ifndef WHEELS_MESSAGE_CMD_SET_CAR_TWO_WHEELS_DIRECTION_SPEEDREQUEST_H
#define WHEELS_MESSAGE_CMD_SET_CAR_TWO_WHEELS_DIRECTION_SPEEDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace wheels
{
template <class ContainerAllocator>
struct cmd_set_car_two_wheels_direction_speedRequest_
{
  typedef cmd_set_car_two_wheels_direction_speedRequest_<ContainerAllocator> Type;

  cmd_set_car_two_wheels_direction_speedRequest_()
    : nNewLeftDirection(0)
    , nNewLeftSpeed(0)
    , nNewRightDirection(0)
    , nNewRightSpeed(0)  {
    }
  cmd_set_car_two_wheels_direction_speedRequest_(const ContainerAllocator& _alloc)
    : nNewLeftDirection(0)
    , nNewLeftSpeed(0)
    , nNewRightDirection(0)
    , nNewRightSpeed(0)  {
    }



   typedef uint32_t _nNewLeftDirection_type;
  _nNewLeftDirection_type nNewLeftDirection;

   typedef uint32_t _nNewLeftSpeed_type;
  _nNewLeftSpeed_type nNewLeftSpeed;

   typedef uint32_t _nNewRightDirection_type;
  _nNewRightDirection_type nNewRightDirection;

   typedef uint32_t _nNewRightSpeed_type;
  _nNewRightSpeed_type nNewRightSpeed;




  typedef boost::shared_ptr< ::wheels::cmd_set_car_two_wheels_direction_speedRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wheels::cmd_set_car_two_wheels_direction_speedRequest_<ContainerAllocator> const> ConstPtr;

}; // struct cmd_set_car_two_wheels_direction_speedRequest_

typedef ::wheels::cmd_set_car_two_wheels_direction_speedRequest_<std::allocator<void> > cmd_set_car_two_wheels_direction_speedRequest;

typedef boost::shared_ptr< ::wheels::cmd_set_car_two_wheels_direction_speedRequest > cmd_set_car_two_wheels_direction_speedRequestPtr;
typedef boost::shared_ptr< ::wheels::cmd_set_car_two_wheels_direction_speedRequest const> cmd_set_car_two_wheels_direction_speedRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wheels::cmd_set_car_two_wheels_direction_speedRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wheels::cmd_set_car_two_wheels_direction_speedRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace wheels

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'wheels': ['/home/alex/RaspberryPiProject/roscar/src/wheels/msg', '/home/alex/RaspberryPiProject/roscar/devel/share/wheels/msg'], 'std_msgs': ['/opt/ros/jade/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/jade/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::wheels::cmd_set_car_two_wheels_direction_speedRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wheels::cmd_set_car_two_wheels_direction_speedRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wheels::cmd_set_car_two_wheels_direction_speedRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wheels::cmd_set_car_two_wheels_direction_speedRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wheels::cmd_set_car_two_wheels_direction_speedRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wheels::cmd_set_car_two_wheels_direction_speedRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wheels::cmd_set_car_two_wheels_direction_speedRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0d3557333dc6dbdbefa6abe934f02845";
  }

  static const char* value(const ::wheels::cmd_set_car_two_wheels_direction_speedRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0d3557333dc6dbdbULL;
  static const uint64_t static_value2 = 0xefa6abe934f02845ULL;
};

template<class ContainerAllocator>
struct DataType< ::wheels::cmd_set_car_two_wheels_direction_speedRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wheels/cmd_set_car_two_wheels_direction_speedRequest";
  }

  static const char* value(const ::wheels::cmd_set_car_two_wheels_direction_speedRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wheels::cmd_set_car_two_wheels_direction_speedRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 nNewLeftDirection\n\
uint32 nNewLeftSpeed\n\
uint32 nNewRightDirection\n\
uint32 nNewRightSpeed\n\
";
  }

  static const char* value(const ::wheels::cmd_set_car_two_wheels_direction_speedRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wheels::cmd_set_car_two_wheels_direction_speedRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.nNewLeftDirection);
      stream.next(m.nNewLeftSpeed);
      stream.next(m.nNewRightDirection);
      stream.next(m.nNewRightSpeed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct cmd_set_car_two_wheels_direction_speedRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wheels::cmd_set_car_two_wheels_direction_speedRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wheels::cmd_set_car_two_wheels_direction_speedRequest_<ContainerAllocator>& v)
  {
    s << indent << "nNewLeftDirection: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.nNewLeftDirection);
    s << indent << "nNewLeftSpeed: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.nNewLeftSpeed);
    s << indent << "nNewRightDirection: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.nNewRightDirection);
    s << indent << "nNewRightSpeed: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.nNewRightSpeed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WHEELS_MESSAGE_CMD_SET_CAR_TWO_WHEELS_DIRECTION_SPEEDREQUEST_H
