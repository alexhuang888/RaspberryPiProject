"""autogenerated by genpy from wheels/cmd_set_navigator_engineRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class cmd_set_navigator_engineRequest(genpy.Message):
  _md5sum = "9219ffb36969eb585914fda01a0004d7"
  _type = "wheels/cmd_set_navigator_engineRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32 nNewEngineID
string strNewEngineDescription

"""
  __slots__ = ['nNewEngineID','strNewEngineDescription']
  _slot_types = ['uint32','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       nNewEngineID,strNewEngineDescription

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(cmd_set_navigator_engineRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.nNewEngineID is None:
        self.nNewEngineID = 0
      if self.strNewEngineDescription is None:
        self.strNewEngineDescription = ''
    else:
      self.nNewEngineID = 0
      self.strNewEngineDescription = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_I.pack(self.nNewEngineID))
      _x = self.strNewEngineDescription
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (self.nNewEngineID,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.strNewEngineDescription = str[start:end].decode('utf-8')
      else:
        self.strNewEngineDescription = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_I.pack(self.nNewEngineID))
      _x = self.strNewEngineDescription
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.nNewEngineID,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.strNewEngineDescription = str[start:end].decode('utf-8')
      else:
        self.strNewEngineDescription = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
"""autogenerated by genpy from wheels/cmd_set_navigator_engineResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class cmd_set_navigator_engineResponse(genpy.Message):
  _md5sum = "bd53b364352e129ec17e824bc0dbe53f"
  _type = "wheels/cmd_set_navigator_engineResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32 nLastEngineID
string strLastEngineDescription
uint32 nActiveEngineID
string strActiveEngineDescription
int32 nRetCode


"""
  __slots__ = ['nLastEngineID','strLastEngineDescription','nActiveEngineID','strActiveEngineDescription','nRetCode']
  _slot_types = ['uint32','string','uint32','string','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       nLastEngineID,strLastEngineDescription,nActiveEngineID,strActiveEngineDescription,nRetCode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(cmd_set_navigator_engineResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.nLastEngineID is None:
        self.nLastEngineID = 0
      if self.strLastEngineDescription is None:
        self.strLastEngineDescription = ''
      if self.nActiveEngineID is None:
        self.nActiveEngineID = 0
      if self.strActiveEngineDescription is None:
        self.strActiveEngineDescription = ''
      if self.nRetCode is None:
        self.nRetCode = 0
    else:
      self.nLastEngineID = 0
      self.strLastEngineDescription = ''
      self.nActiveEngineID = 0
      self.strActiveEngineDescription = ''
      self.nRetCode = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_I.pack(self.nLastEngineID))
      _x = self.strLastEngineDescription
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_I.pack(self.nActiveEngineID))
      _x = self.strActiveEngineDescription
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_i.pack(self.nRetCode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (self.nLastEngineID,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.strLastEngineDescription = str[start:end].decode('utf-8')
      else:
        self.strLastEngineDescription = str[start:end]
      start = end
      end += 4
      (self.nActiveEngineID,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.strActiveEngineDescription = str[start:end].decode('utf-8')
      else:
        self.strActiveEngineDescription = str[start:end]
      start = end
      end += 4
      (self.nRetCode,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_I.pack(self.nLastEngineID))
      _x = self.strLastEngineDescription
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_I.pack(self.nActiveEngineID))
      _x = self.strActiveEngineDescription
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_i.pack(self.nRetCode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.nLastEngineID,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.strLastEngineDescription = str[start:end].decode('utf-8')
      else:
        self.strLastEngineDescription = str[start:end]
      start = end
      end += 4
      (self.nActiveEngineID,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.strActiveEngineDescription = str[start:end].decode('utf-8')
      else:
        self.strActiveEngineDescription = str[start:end]
      start = end
      end += 4
      (self.nRetCode,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
class cmd_set_navigator_engine(object):
  _type          = 'wheels/cmd_set_navigator_engine'
  _md5sum = '8e305c8b095c5860798ff953a1d04b0e'
  _request_class  = cmd_set_navigator_engineRequest
  _response_class = cmd_set_navigator_engineResponse
