"""autogenerated by genpy from wheels/cmd_set_car_two_wheels_direction_speedRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class cmd_set_car_two_wheels_direction_speedRequest(genpy.Message):
  _md5sum = "0d3557333dc6dbdbefa6abe934f02845"
  _type = "wheels/cmd_set_car_two_wheels_direction_speedRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32 nNewLeftDirection
uint32 nNewLeftSpeed
uint32 nNewRightDirection
uint32 nNewRightSpeed

"""
  __slots__ = ['nNewLeftDirection','nNewLeftSpeed','nNewRightDirection','nNewRightSpeed']
  _slot_types = ['uint32','uint32','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       nNewLeftDirection,nNewLeftSpeed,nNewRightDirection,nNewRightSpeed

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(cmd_set_car_two_wheels_direction_speedRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.nNewLeftDirection is None:
        self.nNewLeftDirection = 0
      if self.nNewLeftSpeed is None:
        self.nNewLeftSpeed = 0
      if self.nNewRightDirection is None:
        self.nNewRightDirection = 0
      if self.nNewRightSpeed is None:
        self.nNewRightSpeed = 0
    else:
      self.nNewLeftDirection = 0
      self.nNewLeftSpeed = 0
      self.nNewRightDirection = 0
      self.nNewRightSpeed = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4I.pack(_x.nNewLeftDirection, _x.nNewLeftSpeed, _x.nNewRightDirection, _x.nNewRightSpeed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.nNewLeftDirection, _x.nNewLeftSpeed, _x.nNewRightDirection, _x.nNewRightSpeed,) = _struct_4I.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4I.pack(_x.nNewLeftDirection, _x.nNewLeftSpeed, _x.nNewRightDirection, _x.nNewRightSpeed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.nNewLeftDirection, _x.nNewLeftSpeed, _x.nNewRightDirection, _x.nNewRightSpeed,) = _struct_4I.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4I = struct.Struct("<4I")
"""autogenerated by genpy from wheels/cmd_set_car_two_wheels_direction_speedResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class cmd_set_car_two_wheels_direction_speedResponse(genpy.Message):
  _md5sum = "a9e93ff9d60cc9b3e2505bbd7d975846"
  _type = "wheels/cmd_set_car_two_wheels_direction_speedResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32 nLastLeftDirection
uint32 nLastLeftSpeed
uint32 nLastRightDirection
uint32 nLastRightSpeed

uint32 nNewLeftDirection
uint32 nNewLeftSpeed

uint32 nNewRightDirection
uint32 nNewRightSpeed

int32 nRetCode


"""
  __slots__ = ['nLastLeftDirection','nLastLeftSpeed','nLastRightDirection','nLastRightSpeed','nNewLeftDirection','nNewLeftSpeed','nNewRightDirection','nNewRightSpeed','nRetCode']
  _slot_types = ['uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       nLastLeftDirection,nLastLeftSpeed,nLastRightDirection,nLastRightSpeed,nNewLeftDirection,nNewLeftSpeed,nNewRightDirection,nNewRightSpeed,nRetCode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(cmd_set_car_two_wheels_direction_speedResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.nLastLeftDirection is None:
        self.nLastLeftDirection = 0
      if self.nLastLeftSpeed is None:
        self.nLastLeftSpeed = 0
      if self.nLastRightDirection is None:
        self.nLastRightDirection = 0
      if self.nLastRightSpeed is None:
        self.nLastRightSpeed = 0
      if self.nNewLeftDirection is None:
        self.nNewLeftDirection = 0
      if self.nNewLeftSpeed is None:
        self.nNewLeftSpeed = 0
      if self.nNewRightDirection is None:
        self.nNewRightDirection = 0
      if self.nNewRightSpeed is None:
        self.nNewRightSpeed = 0
      if self.nRetCode is None:
        self.nRetCode = 0
    else:
      self.nLastLeftDirection = 0
      self.nLastLeftSpeed = 0
      self.nLastRightDirection = 0
      self.nLastRightSpeed = 0
      self.nNewLeftDirection = 0
      self.nNewLeftSpeed = 0
      self.nNewRightDirection = 0
      self.nNewRightSpeed = 0
      self.nRetCode = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_8Ii.pack(_x.nLastLeftDirection, _x.nLastLeftSpeed, _x.nLastRightDirection, _x.nLastRightSpeed, _x.nNewLeftDirection, _x.nNewLeftSpeed, _x.nNewRightDirection, _x.nNewRightSpeed, _x.nRetCode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.nLastLeftDirection, _x.nLastLeftSpeed, _x.nLastRightDirection, _x.nLastRightSpeed, _x.nNewLeftDirection, _x.nNewLeftSpeed, _x.nNewRightDirection, _x.nNewRightSpeed, _x.nRetCode,) = _struct_8Ii.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_8Ii.pack(_x.nLastLeftDirection, _x.nLastLeftSpeed, _x.nLastRightDirection, _x.nLastRightSpeed, _x.nNewLeftDirection, _x.nNewLeftSpeed, _x.nNewRightDirection, _x.nNewRightSpeed, _x.nRetCode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.nLastLeftDirection, _x.nLastLeftSpeed, _x.nLastRightDirection, _x.nLastRightSpeed, _x.nNewLeftDirection, _x.nNewLeftSpeed, _x.nNewRightDirection, _x.nNewRightSpeed, _x.nRetCode,) = _struct_8Ii.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_8Ii = struct.Struct("<8Ii")
class cmd_set_car_two_wheels_direction_speed(object):
  _type          = 'wheels/cmd_set_car_two_wheels_direction_speed'
  _md5sum = '9128a6c04ba27907a78d99bb5fdac112'
  _request_class  = cmd_set_car_two_wheels_direction_speedRequest
  _response_class = cmd_set_car_two_wheels_direction_speedResponse
