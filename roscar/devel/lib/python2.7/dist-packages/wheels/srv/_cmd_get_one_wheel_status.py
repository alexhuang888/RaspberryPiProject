"""autogenerated by genpy from wheels/cmd_get_one_wheel_statusRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class cmd_get_one_wheel_statusRequest(genpy.Message):
  _md5sum = "8d352e28eb94515d4f0db5ca94dd1ac5"
  _type = "wheels/cmd_get_one_wheel_statusRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32 nWheelID

"""
  __slots__ = ['nWheelID']
  _slot_types = ['uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       nWheelID

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(cmd_get_one_wheel_statusRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.nWheelID is None:
        self.nWheelID = 0
    else:
      self.nWheelID = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_I.pack(self.nWheelID))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (self.nWheelID,) = _struct_I.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_I.pack(self.nWheelID))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.nWheelID,) = _struct_I.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
"""autogenerated by genpy from wheels/cmd_get_one_wheel_statusResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class cmd_get_one_wheel_statusResponse(genpy.Message):
  _md5sum = "b0e5283a5f5329d6928226b5d620136f"
  _type = "wheels/cmd_get_one_wheel_statusResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32 nWheelDirection
uint32 nWheelSpeed
uint32 nWheelHealthStatus
int32 nRetCode


"""
  __slots__ = ['nWheelDirection','nWheelSpeed','nWheelHealthStatus','nRetCode']
  _slot_types = ['uint32','uint32','uint32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       nWheelDirection,nWheelSpeed,nWheelHealthStatus,nRetCode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(cmd_get_one_wheel_statusResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.nWheelDirection is None:
        self.nWheelDirection = 0
      if self.nWheelSpeed is None:
        self.nWheelSpeed = 0
      if self.nWheelHealthStatus is None:
        self.nWheelHealthStatus = 0
      if self.nRetCode is None:
        self.nRetCode = 0
    else:
      self.nWheelDirection = 0
      self.nWheelSpeed = 0
      self.nWheelHealthStatus = 0
      self.nRetCode = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3Ii.pack(_x.nWheelDirection, _x.nWheelSpeed, _x.nWheelHealthStatus, _x.nRetCode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.nWheelDirection, _x.nWheelSpeed, _x.nWheelHealthStatus, _x.nRetCode,) = _struct_3Ii.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3Ii.pack(_x.nWheelDirection, _x.nWheelSpeed, _x.nWheelHealthStatus, _x.nRetCode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.nWheelDirection, _x.nWheelSpeed, _x.nWheelHealthStatus, _x.nRetCode,) = _struct_3Ii.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3Ii = struct.Struct("<3Ii")
class cmd_get_one_wheel_status(object):
  _type          = 'wheels/cmd_get_one_wheel_status'
  _md5sum = 'd68fceb73ca087ead6d51290a67889fa'
  _request_class  = cmd_get_one_wheel_statusRequest
  _response_class = cmd_get_one_wheel_statusResponse
